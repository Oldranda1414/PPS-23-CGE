# See https://www.wartremover.org/doc/warts.html. At the moment, only 'unsafe' warts are available in gradle.

warts {                              # Possible treat levels for a wart are: Error | Warning | Ignore
  ArrayEquals = Error                # Forbid: Array(1, 2) == Array(1, 2)
  Any = Error                        # Forbid: val x: Any = List(1, true, "three")
  AnyVal = Ignore
  AsInstanceOf = Error               # Forbid: x.asInstanceOf[String]
  DefaultArguments = Ignore          # Allow: def x(y: Int = 0) = y
  EitherProjectionPartial = Error    # Forbid: not using Option with projections
  Enumeration = Error                # Forbid: use enum
  Equals = Ignore                    # Allow: ==(Any, Any)
  ExplicitImplicitTypes = Error      # Forbid: let Scala infer types
  FinalCaseClass = Error             # Forbid: case classes without warning can cause troubles
  FinalVal = Error                   # Forbid: can't declare a val final
  ImplicitConversion = Error         # Forbid: implicit conversions
  ImplicitParameter = Ignore          # Forbid: implicit parameters
  IsInstanceOf = Warning             # Shouldn't: x.isInstanceOf[String]
  JavaConversion = Error             # Forbid
  JavaSerializable = Error
  LeakingSealed = Error
  MutableDataStructures = Error      # Forbid: using mutable data structures
  NonUnitStatements = Warning        # Shouldn't: def x(): Unit = 100
  Nothing = Error
  Null = Error                       # Forbid: val x = null
  Option2Iterable = Error
  OptionPartial = Error              # Forbid: using Option.get
  Overloading = Ignore
  Product = Error                    # Forbid: val any = List((1, 2, 3), (1, 2)) (:Product)
  PublicInference = Error
  Recursion = Ignore                 # Allow: recursive methods
  Return = Error                     # Forbid: def x(): Int = return 5
  Serializable = Error               # Forbid: val any = List((1, 2, 3), (1, 2)) (:Serializable)
  StringPlusAny = Warning            # Shouldn't: "foo"+{} or {}+"bar"
  Throw = Ignore                     # Allow: throwing exceptions
  ToString = Ignore
  IterableOps = Ignore               # Forbid: not using Option with iterables
  TripleQuestionMark = Warning       # Shouldn't: throwing the "???" exception
  TryPartial = Error                 # Forbid: not using getOrElse with try partial
  Unsafe = Ignore
  Var = Ignore                       # Allow: var x: Int = 10
  While = Ignore
}